#include "engine.hpp"
#include "components/particle_system.hpp"

struct Explosion: public GameObject{
    ParticleSystem * system;
    float lifetime;
    float time;
    Explosion():
        time(0), lifetime(0.2f)
    {}

    void on_introduce()override{
        ParticleSystemProperties props;
        props.color_begin = sf::Color::Yellow;
        props.color_end = sf::Color::Red;
        props.speed = 300;
        system = component_add<ParticleSystem>(props);

    }
    void on_update(float dt)override{
        time += dt;
        if(time > lifetime){
            destroy();
        }
    }
};

struct Bullet: public GameObject{
    ParticleSystem * system;
    sf::Vector2f direction;
    float lifetime;
    float time;
    Bullet(const sf::Vector2f& dir):
        direction(dir),
        time(0),
        lifetime(1.0f)
    {}

    void on_introduce()override{
        ParticleSystemProperties props;
        props.color_begin = sf::Color::Yellow;
        props.color_end = sf::Color::Red;
        system = component_add<ParticleSystem>(props);


    }
    void on_update(float dt)override{
        translate(direction*dt);
        time += dt;
        if(time > lifetime){
            destroy();
            object_introduce(new Explosion);
        }
    }
};

struct Player: public GameObject{
    Sprite2D * sprite;
    ParticleSystem * system;
    float speed;
    double spawn_rate;
    sf::Vector2f direction;
    bool shooted;
    Player():
        shooted(false),
        direction(800,0),
        speed(600.f),
        spawn_rate(0.01f)
    {}

    void on_introduce()override{

        sprite = component_add<Sprite2D>();
        sprite->set_color(sf::Color::Green);
        sprite->set_size(200,300);
        ParticleSystemProperties props;
        props.spawn_position = sf::Vector2f(100,0);
        props.color_begin = sf::Color::Green;
        props.color_end = sf::Color(0,0,0,0);
        props.life_time = 2;
        props.spawn_rate = 0.05;
        props.speed = 400;
        props.delta_angle = 90;
        system = component_add<ParticleSystem>(props);

    }

    void on_update(float dt)override{
        if(Input::key_pressed(KeyCode::W)){
            translate(0,-speed*dt);
            direction = sf::Vector2f(0,-800);
        }
        if(Input::key_pressed(KeyCode::S)){
            translate(0,speed*dt);
            direction = sf::Vector2f(0,800);
        }
        if(Input::key_pressed(KeyCode::D)){
            translate(speed*dt,0);
            direction = sf::Vector2f(800,0);
        }
        if(Input::key_pressed(KeyCode::A)){
            translate(-speed*dt,0);
            direction = sf::Vector2f(-800,0);
        }
        if(Input::key_pressed(KeyCode::Q)){
            Engine::get_singleton()->stop();
        }
        if(Input::key_pressed(KeyCode::Space)){
            if(!shooted){
                object_introduce(new Bullet(direction), sf::Vector2f(100,150));
                shooted  = true;
            }
        }else{
            shooted = false;
        }

        
        
    }


};

class Scene: public BaseScene{
private:
public:
    void on_init()override{
        
        object_introduce(new Player);
    }

    void on_update(float dt)override{
        
    }
};



int main(){
    // to make games with engine we need, well, engine
    Engine * engine = new Engine();
    // set engine properties
    EngineProperties props;
    props.window_title = "Super AAA game";
    //props.window_style = sf::Style::Fullscreen;
    props.mode = sf::VideoMode(1280,720);
    props.show_fps = true;
    // set 0 to disable fps limit
    props.frame_rate_limit = 60;

    // we have to init engine with certain properties
    engine->init(props);
    // and propvide it with a scene (inherited from a BaseScene)
    engine->set_entry_scene(new Scene,"MainScene");
    // now lets start your game!
    engine->start();
    engine->shutdown();
}